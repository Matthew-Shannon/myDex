// Mocks generated by Mockito 5.1.0 from annotations
// in mydex/test/src/service/prefs_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mydex/src/service/prefs.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [IPrefs].
///
/// See the documentation for Mockito's code generation for more information.
class MockIPrefs extends _i1.Mock implements _i2.IPrefs {
  MockIPrefs() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> clear() => (super.noSuchMethod(Invocation.method(#clear, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> setId(int? value) =>
      (super.noSuchMethod(Invocation.method(#setId, [value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<int> getId() => (super.noSuchMethod(Invocation.method(#getId, []),
      returnValue: Future<int>.value(0)) as _i3.Future<int>);
  @override
  _i3.Future<void> setPos(int? value) =>
      (super.noSuchMethod(Invocation.method(#setPos, [value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<int> getPos() =>
      (super.noSuchMethod(Invocation.method(#getPos, []),
          returnValue: Future<int>.value(0)) as _i3.Future<int>);
  @override
  _i3.Future<void> setAuth(bool? value) =>
      (super.noSuchMethod(Invocation.method(#setAuth, [value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<bool> getAuth() =>
      (super.noSuchMethod(Invocation.method(#getAuth, []),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<void> setTheme(bool? value) =>
      (super.noSuchMethod(Invocation.method(#setTheme, [value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<bool> getTheme() =>
      (super.noSuchMethod(Invocation.method(#getTheme, []),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
}
